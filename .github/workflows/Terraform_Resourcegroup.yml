name: Terraform

on:
  workflow_call:

    inputs:
      AZURE_DEFAULT_LOCATION:
        required: true
        type: string
      AZURE_BACKEND_STATE_FILE:
        required: true
        type: string
      AZURE_RESOURCE_GROUP_NAME:
        required: true
        type: string
      AZURE_BACKEND_RESOURCE_GROUP_NAME:
        type: string
        required: true
      AZURE_BACKEND_STORAGE_ACCOUNT_NAME:
        type: string
        required: true
      AZURE_BACKEND_CONTAINER_NAME:
        type: string
        required: true

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  setup-terraform:
    name: Setup Terraform
    runs-on: rdam
    environment: production
    env:
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_location: ${{ inputs.AZURE_DEFAULT_LOCATION }}
      TF_VAR_resource_group_name: ${{ inputs.AZURE_RESOURCE_GROUP_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="resource_group_name=${{ inputs.AZURE_BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ inputs.AZURE_BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ inputs.AZURE_BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ inputs.AZURE_BACKEND_STATE_FILE }}" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        id: tf-plan
        run: terraform plan -input=false | tee plan_output.log

      - name: Terraform Plan & Prevent Destroy (Scheduled Runs Only)
        if: github.event_name == 'schedule'
        run: |
          terraform plan -out=tfplan
          terraform show -json tfplan | jq -e '.resource_changes[]?.change.actions | index("delete")' >/dev/null \
            && { echo "Destroy operations detected in Terraform plan. Cancelling pipeline."; exit 1; } \
            || echo "No destroy operations detected."

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'schedule')
        run: terraform apply -auto-approve -input=false
