name: Terraform

on:
  workflow_call:

    inputs:
      AZURE_DEFAULT_LOCATION:
        required: true
        type: string
      AZURE_BACKEND_STATE_FILE:
        required: true
        type: string
      AZURE_RESOURCE_GROUP_NAME:
        required: true
        type: string
      AZURE_BACKEND_RESOURCE_GROUP_NAME:
        type: string
        required: true
      AZURE_BACKEND_STORAGE_ACCOUNT_NAME:
        type: string
        required: true
      AZURE_BACKEND_CONTAINER_NAME:
        type: string
        required: true

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  setup-terraform:
    name: Setup Terraform
    runs-on: rdam
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false
          #auth-type: IDENTITY

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: | 
          export TF_VAR_tenant_id="${{ secrets.AZURE_TENANT_ID }}"
          export TF_VAR_client_id="${{ secrets.AZURE_CLIENT_ID }}"
          export TF_VAR_subscription_id="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          export TF_VAR_location="${{ inputs.AZURE_DEFAULT_LOCATION }}"
          export TF_VAR_resource_group_name="${{ inputs.AZURE_RESOURCE_GROUP_NAME }}"
          terraform init \
            -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -backend-config="resource_group_name=${{ inputs.AZURE_BACKEND_RESOURCE_GROUP_NAME }}" \
            -backend-config="storage_account_name=${{ inputs.AZURE_BACKEND_STORAGE_ACCOUNT_NAME }}" \
            -backend-config="container_name=${{ inputs.AZURE_BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ inputs.AZURE_BACKEND_STATE_FILE }}" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Plan
        if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'schedule'
        id: tf-plan
        run: |
          export TF_VAR_tenant_id="${{ secrets.AZURE_TENANT_ID }}"
          export TF_VAR_client_id="${{ secrets.AZURE_CLIENT_ID }}"
          export TF_VAR_subscription_id="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          export TF_VAR_location="${{ inputs.AZURE_DEFAULT_LOCATION }}"
          export TF_VAR_resource_group_name="${{ inputs.AZURE_RESOURCE_GROUP_NAME }}"
          terraform plan -input=false | tee plan_output.log

      - name: Prevent Only Destroy Operations (Scheduled Runs Only)
        if: github.event_name == 'schedule'
        run: |
          echo "üîç Checking for destroy actions using Terraform output..."
            destroy_count=$(terraform plan -no-color | grep -Eo '[0-9]+ to destroy' | awk '{sum+=$1} END {print sum}')
  
            destroy_count=${destroy_count:-0}
  
            if [[ "$destroy_count" -gt 0 ]]; then
              echo "‚ùå Terraform plan detected destroy operations! Stopping workflow."
              exit 1
            else
              echo "‚úÖ No destroy operations detected. Proceeding..."
            fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'schedule')
        run: |
          export TF_VAR_tenant_id="${{ secrets.AZURE_TENANT_ID }}"
          export TF_VAR_client_id="${{ secrets.AZURE_CLIENT_ID }}"
          export TF_VAR_subscription_id="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          export TF_VAR_location="${{ inputs.AZURE_DEFAULT_LOCATION }}"
          export TF_VAR_resource_group_name="${{ inputs.AZURE_RESOURCE_GROUP_NAME }}"
          terraform apply -auto-approve -input=false
